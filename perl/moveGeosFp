#!/usr/bin/perl -w

#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !MODULE: moveGeosFp
#
# !DESCRIPTION: This Perl script is used to move GEOS-FP files for
#  from the scratch directory space to the GEOS-Chem data directory space.
#\\
#\\
# !USES:
#
  require 5.003;                # need this version of Perl or newer
  use strict;                   # IMPLICIT NONE syntax
#
# !PUBLIC MEMBER FUNCTIONS:
#
# getDefaults($$)
# getDirectories($)
# getSysVars()
# replaceTokens($)
# checkDir($)
# moveFiles()
# main()
#
# !PUBLIC DATA MEMBERS:
#
				
# General variables
our $DAY_STRING        = "";
our $DEFAULTS_FOR_EXE  = "";
our $HOME_DIRECTORY    = "";
our $MONTH_STRING      = "";
our $USER_ID           = "";
our $YEAR_STRING       = "";

# Data file names and directories
our $DO_NEST_AF          = "";
our $DATA_FILE_NEST_AF   = "";
our $TEMP_DIR_NEST_AF    = "";
our $DATA_DIR_NEST_AF    = "";
our $DO_NEST_AS          = "";
our $DATA_FILE_NEST_AS   = "";
our $TEMP_DIR_NEST_AS    = "";
our $DATA_DIR_NEST_AS    = "";
our $DO_NEST_EU          = "";
our $DATA_FILE_NEST_EU   = "";
our $TEMP_DIR_NEST_EU    = "";
our $DATA_DIR_NEST_EU    = "";
our $DO_NEST_ME          = "";
our $DATA_FILE_NEST_ME   = "";
our $TEMP_DIR_NEST_ME    = "";
our $DATA_DIR_NEST_ME    = "";
our $DO_NEST_NA          = "";
our $DATA_FILE_NEST_NA   = "";
our $TEMP_DIR_NEST_NA    = "";
our $DATA_DIR_NEST_NA    = "";
our $DO_NEST_OC          = "";
our $DATA_FILE_NEST_OC   = "";
our $TEMP_DIR_NEST_OC    = "";
our $DATA_DIR_NEST_OC    = "";
our $DO_NEST_RU          = "";
our $DATA_FILE_NEST_RU   = "";
our $TEMP_DIR_NEST_RU    = "";
our $DATA_DIR_NEST_RU    = "";
our $DO_NEST_SA          = "";
our $DATA_FILE_NEST_SA   = "";
our $TEMP_DIR_NEST_SA    = "";
our $DATA_DIR_NEST_SA    = "";
our $DO_NEST_AS_05       = "";
our $DATA_FILE_NEST_AS_05= "";
our $TEMP_DIR_NEST_AS_05 = "";
our $DATA_DIR_NEST_AS_05 = "";
our $DO_NEST_EU_05       = "";
our $DATA_FILE_NEST_EU_05= "";
our $TEMP_DIR_NEST_EU_05 = "";
our $DATA_DIR_NEST_EU_05 = "";
our $DO_NEST_NA_05       = "";
our $DATA_FILE_NEST_NA_05= "";
our $TEMP_DIR_NEST_NA_05 = "";
our $DATA_DIR_NEST_NA_05 = "";
our $DO_025x03125        = "";
our $DATA_FILE_025x03125 = "";
our $TEMP_DIR_025x03125  = "";
our $DATA_DIR_025x03125  = "";
our $DO_05x0625          = "";
our $DATA_FILE_05x0625   = "";
our $TEMP_DIR_05x0625    = "";
our $DATA_DIR_05x0625    = "";
our $DO_2x25             = "";
our $DATA_FILE_2x25      = "";
our $TEMP_DIR_2x25       = "";
our $DATA_DIR_2x25       = "";
our $DO_4x5              = "";
our $DATA_FILE_4x5       = "";
our $TEMP_DIR_4x5        = "";
our $DATA_DIR_4x5        = "";
#
# !CALLING SEQUENCE:
# moveGeosFp YYYYMMDD FILETYPE
#
# !REVISION HISTORY: 
#  23 Jan 2012 - R. Yantosca - Initial version
#  16 Feb 2012 - R. Yantosca - Updated for NA nested grid
#  24 May 2013 - R. Yantosca - Now read logicals from GeosFpDriver.input that
#                              can be used to shut off file moves
#  20 Sep 2013 - R. Yantosca - Renamed to moveGeosFp
#  10 Oct 2013 - R. Yantosca - Now move data from SE Asia nested grid (SE)
#  11 Oct 2013 - R. Yantosca - Now do not move files if the temporary dir 
#                              matches the output dir
#EOP
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: getDefaults
#
# !DESCRIPTION:  Routine getDefaults reads the default values for 
#  input quantities.
#\\
#\\
# !INTERFACE:
#
sub getDefaults($$) {
#
# !INPUT PARAMETERS:
#
  # $fileName : File containing default settings to be read
  # $date     : YYYYMMDD date for which to process met data
  my ( $fileName, $date ) = @_;
#
# !CALLING SEQUENCE:
# &getDefaults( FILENAME, DATE );
#
# !REVISION HISTORY:
#  23 Jan 2012 - R. Yantosca - Initial version
#EOP
#------------------------------------------------------------------------------
#BOC
#
# !LOCAL VARIABLES:
#
  # Local variables
  my $line         = "";   
  my @file         = "";
  my @result       = "";

  #--------------------------------------
  # Read variable settings from the file
  #--------------------------------------

  # Read defaults file into an array (remove newlines)
  open( I, "<$fileName" ) or die "Cannot open $fileName!\n";
  chomp( @file = <I> );
  close( I );

  # Loop thru each line in the file
  for ( my $i = 0; $i <  scalar( @file ); $i++ ) {

    if ( $file[$i] =~ "==> Defaults for Executable" ) {
      $DEFAULTS_FOR_EXE = $file[++$i];
    }

  }

  # Date strings
  $YEAR_STRING  = substr( $date, 0, 4 );
  $MONTH_STRING = substr( $date, 4, 2 );
  $DAY_STRING   = substr( $date, 6, 2 );

  # Return normally
  return(0);
}
#EOP
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: getDirectories
#
# !DESCRIPTION:  Routine getDirectories reads the file and directory paths
#  from the input file for the GEOS-FP Fortran executable.
#\\
#\\
# !INTERFACE:
#
sub getDirectories($) {
#
# !INPUT PARAMETERS:
#
  # $fileName : File containing default settings to be read
  my ( $fileName ) = @_;
#
# !CALLING SEQUENCE:
# &getDirectories( FILENAME )
#
# !REVISION HISTORY:
#  23 Jan 2012 - R. Yantosca - Initial version
#  16 Feb 2012 - R. Yantosca - Updated for NA nested grid
#  24 May 2013 - R. Yantosca - Now read logicals from GeosFpDriver.input
#  10 Oct 2013 - R. Yantosca - Do not move files if the temporary directory
#                              is the same as the data directory as listed
#                              in bin/GeosFpDriver.input.
#EOP
#------------------------------------------------------------------------------
#BOC
#
# !LOCAL VARIABLES:
#
  my $line     = "";   
  my @file     = "";

  #--------------------------------------
  # Read variable settings from the file
  #--------------------------------------

  # Read defaults file into an array (remove newlines)
  open( I, "<$fileName" ) or die "Cannot open $fileName!\n";
  chomp( @file = <I> );
  close( I );

  # Loop thru each line in the file
  for ( my $i = 0; $i < scalar( @file ); $i++ ) {

    if ( $file[$i] =~ "==> 0.25x0.3125 Nested AF output" ) {
      $DO_NEST_AF        = $file[++$i];
      $DATA_FILE_NEST_AF = $file[++$i];
      $TEMP_DIR_NEST_AF  = $file[++$i];
      $DATA_DIR_NEST_AF  = $file[++$i];

    } elsif ( $file[$i] =~ "==> 0.25x0.3125 Nested AS output" ) {
      $DO_NEST_AS        = $file[++$i];
      $DATA_FILE_NEST_AS = $file[++$i];
      $TEMP_DIR_NEST_AS  = $file[++$i];
      $DATA_DIR_NEST_AS  = $file[++$i];

    } elsif ( $file[$i] =~ "==> 0.25x0.3125 Nested EU output" ) {
      $DO_NEST_EU        = $file[++$i];
      $DATA_FILE_NEST_EU = $file[++$i];
      $TEMP_DIR_NEST_EU  = $file[++$i];
      $DATA_DIR_NEST_EU  = $file[++$i];

    } elsif ( $file[$i] =~ "==> 0.25x0.3125 Nested ME output" ) {
      $DO_NEST_ME        = $file[++$i];
      $DATA_FILE_NEST_ME = $file[++$i];
      $TEMP_DIR_NEST_ME  = $file[++$i];
      $DATA_DIR_NEST_ME  = $file[++$i];

    } elsif ( $file[$i] =~ "==> 0.25x0.3125 Nested NA output" ) {
      $DO_NEST_NA        = $file[++$i];
      $DATA_FILE_NEST_NA = $file[++$i];
      $TEMP_DIR_NEST_NA  = $file[++$i];
      $DATA_DIR_NEST_NA  = $file[++$i];

    } elsif ( $file[$i] =~ "==> 0.25x0.3125 Nested OC output" ) {
      $DO_NEST_OC        = $file[++$i];
      $DATA_FILE_NEST_OC = $file[++$i];
      $TEMP_DIR_NEST_OC  = $file[++$i];
      $DATA_DIR_NEST_OC  = $file[++$i];

    } elsif ( $file[$i] =~ "==> 0.25x0.3125 Nested RU output" ) {
      $DO_NEST_RU        = $file[++$i];
      $DATA_FILE_NEST_RU = $file[++$i];
      $TEMP_DIR_NEST_RU  = $file[++$i];
      $DATA_DIR_NEST_RU  = $file[++$i];

    } elsif ( $file[$i] =~ "==> 0.25x0.3125 Nested SA output" ) {
      $DO_NEST_SA        = $file[++$i];
      $DATA_FILE_NEST_SA = $file[++$i];
      $TEMP_DIR_NEST_SA  = $file[++$i];
      $DATA_DIR_NEST_SA  = $file[++$i];

    } elsif ( $file[$i] =~ "==> 0.5x0.625 Nested AS output" ) {
      $DO_NEST_AS_05        = $file[++$i];
      $DATA_FILE_NEST_AS_05 = $file[++$i];
      $TEMP_DIR_NEST_AS_05  = $file[++$i];
      $DATA_DIR_NEST_AS_05  = $file[++$i];

    } elsif ( $file[$i] =~ "==> 0.5x0.625 Nested EU output" ) {
      $DO_NEST_EU_05        = $file[++$i];
      $DATA_FILE_NEST_EU_05 = $file[++$i];
      $TEMP_DIR_NEST_EU_05  = $file[++$i];
      $DATA_DIR_NEST_EU_05  = $file[++$i];

    } elsif ( $file[$i] =~ "==> 0.5x0.625 Nested NA output" ) {
      $DO_NEST_NA_05        = $file[++$i];
      $DATA_FILE_NEST_NA_05 = $file[++$i];
      $TEMP_DIR_NEST_NA_05  = $file[++$i];
      $DATA_DIR_NEST_NA_05  = $file[++$i];

    } elsif ( $file[$i] =~ "==> 0.25x0.3125 global output" ) {
      $DO_025x03125        = $file[++$i];
      $DATA_FILE_025x03125 = $file[++$i];
      $TEMP_DIR_025x03125  = $file[++$i];
      $DATA_DIR_025x03125  = $file[++$i];

    } elsif ( $file[$i] =~ "==> 0.5x0.625 global output" ) {
      $DO_05x0625        = $file[++$i];
      $DATA_FILE_05x0625 = $file[++$i];
      $TEMP_DIR_05x0625  = $file[++$i];
      $DATA_DIR_05x0625  = $file[++$i];

    } elsif ( $file[$i] =~ "==> 2 x 2.5 global output" ) {
      $DO_2x25           = $file[++$i];
      $DATA_FILE_2x25    = $file[++$i];
      $TEMP_DIR_2x25     = $file[++$i];
      $DATA_DIR_2x25     = $file[++$i];

    } elsif ( $file[$i] =~ "==> 4 x 5 global output" ) {
      $DO_4x5            = $file[++$i];
      $DATA_FILE_4x5     = $file[++$i];
      $TEMP_DIR_4x5      = $file[++$i];
      $DATA_DIR_4x5      = $file[++$i];

    }
  }

  # Don't move files if the temporary directory string is the same as the 
  # data directory string.  This allows us to skip using the temporary 
  # directory.  You must edit bin/GeosFpDriver.input accordingly.
  # is the same as the data directory string
  if ( $TEMP_DIR_NEST_AF    eq $DATA_DIR_NEST_AF    ) { $DO_NEST_AF    = "F"; }
  if ( $TEMP_DIR_NEST_AS    eq $DATA_DIR_NEST_AS    ) { $DO_NEST_AS    = "F"; }
  if ( $TEMP_DIR_NEST_EU    eq $DATA_DIR_NEST_EU    ) { $DO_NEST_EU    = "F"; }
  if ( $TEMP_DIR_NEST_ME    eq $DATA_DIR_NEST_ME    ) { $DO_NEST_ME    = "F"; }
  if ( $TEMP_DIR_NEST_NA    eq $DATA_DIR_NEST_NA    ) { $DO_NEST_NA    = "F"; }
  if ( $TEMP_DIR_NEST_OC    eq $DATA_DIR_NEST_AS    ) { $DO_NEST_OC    = "F"; }
  if ( $TEMP_DIR_NEST_RU    eq $DATA_DIR_NEST_AS    ) { $DO_NEST_RU    = "F"; }
  if ( $TEMP_DIR_NEST_SA    eq $DATA_DIR_NEST_AS    ) { $DO_NEST_SA    = "F"; }
  if ( $TEMP_DIR_NEST_AS_05 eq $DATA_DIR_NEST_AS_05 ) { $DO_NEST_AS_05 = "F"; }
  if ( $TEMP_DIR_NEST_EU_05 eq $DATA_DIR_NEST_EU_05 ) { $DO_NEST_EU_05 = "F"; }
  if ( $TEMP_DIR_NEST_NA_05 eq $DATA_DIR_NEST_NA_05 ) { $DO_NEST_NA_05 = "F"; }
  if ( $TEMP_DIR_025x03125  eq $DATA_DIR_025x03125  ) { $DO_025x03125  = "F"; }
  if ( $TEMP_DIR_05x0625    eq $DATA_DIR_05x0625    ) { $DO_05x0625    = "F"; }
  if ( $TEMP_DIR_2x25       eq $DATA_DIR_2x25       ) { $DO_2x25       = "F"; }
  if ( $TEMP_DIR_4x5        eq $DATA_DIR_4x5        ) { $DO_4x5        = "F"; }

  # Return normally
  return(0);
}
#EOC
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: getSysVars
#
# !DESCRIPTION: Routine getSysVars returns system variables \$USER and \$HOME.
#\\
#\\
# !INTERFACE:
#
sub getSysVars() {
#
# !CALLING SEQUENCE:
# &getSysVars();
#
# !REVISION HISTORY:
#  23 Jan 2012 - R. Yantosca - Initial version
#EOP
#------------------------------------------------------------------------------
#BOC

  # User ID (remove newline)
  $USER_ID = qx( echo \$USER );
  chomp( $USER_ID );
  
  # Home directory (remove newline)
  $HOME_DIRECTORY = qx( echo \$HOME );
  chomp( $HOME_DIRECTORY );

  # Return normally
  return(0);
}
#EOC
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: replaceTokens
#
# !DESCRIPTION: Subroutine replaceTokens replaces tokens in a variable.  
#\\
#\\
# !INTERFACE:
#
sub replaceTokens($$) {
#
# !INPUT PARAMETERS:
#
  # $var: Name of the string in which to replace tokens
  my ( $var, $fileType ) = @_; 
#
# !CALLING SEQUENCE:
#  $var = &replaceTokens( $var );
#
# !REVISION HISTORY:
#  23 Jan 2012 - R. Yantosca - Initial version
#  23 Jan 2012 - R. Yantosca - Added $fileType argument
#EOP
#------------------------------------------------------------------------------
#BOC

  # Replace tokens in the variable names
  $var =~ s/{HOME}/$HOME_DIRECTORY/g;
  $var =~ s/{USER}/$USER_ID/g;
  $var =~ s/YYYY/$YEAR_STRING/g;
  $var =~ s/MM/$MONTH_STRING/g;
  $var =~ s/DD/$DAY_STRING/g;
  $var =~ s/%%%%%%/$fileType/g;
 
  # Return to calling program
  return( $var );
}
#EOC
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: checkDir
#
# !DESCRIPTION: Subroutine checkDir checks to see if a directory exists.
#\\
#\\
# !INTERFACE:
#
sub checkDir($) {
#
# !INPUT PARAMETERS:
#
  # $dir : Directory to be checked
  my ( $dir ) = @_;
#
# !CALLING SEQUENCE:
#  &checkDir( $dir );
#
# !REVISION HISTORY:
#  23 Jan 2012 - R. Yantosca - Initial version
#EOP
#------------------------------------------------------------------------------
#BOC

  # Stop with error if directory doesn't exist
  if ( !( -d $dir ) ) { 
    print "moveGeosFp ERROR: Directory does not exist: $dir\n";
    exit(1)
  }
  
  # Otherwise return normally
  return(0);
}
#EOC
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: moveFiles
#
# !DESCRIPTION: Subroutine moveFiles moves the processed GEOS-FP met field 
#  files from the temporary directory to the data directory.
#\\
#\\
# !INTERFACE:
#
sub moveFiles(@) {
#
# !REVISION HISTORY:
#  23 Jan 2012 - R. Yantosca - Initial version
#  16 Feb 2012 - R. Yantosca - Updated for Nested NA grid
#  24 May 2013 - R. Yantosca - Now block off move statements with logicals
#EOP
#------------------------------------------------------------------------------
#BOC
#
# !LOCAL VARIABLES:
#
  my $cmd      = "";
  my $dir      = ""; 
  my $mask     = "";
  my $result   = "";
  my $fileType = "";

  # Skip the first argument, which is the date
  for ( my $i=1; $i<=$#ARGV; $i++ ) {
    
    # Get the file type (e.g. CN, A1, etc.)
    $fileType = $_[$i];

    #-------------------------------
    # 0.25x0.3125 Nested Africa grid 
    #-------------------------------
    if ( $DO_NEST_AF =~ "T" ) {

      # Temporary file mask
      $mask   = "$TEMP_DIR_NEST_AF$DATA_FILE_NEST_AF";
      $mask   = &replaceTokens( $mask, $fileType );
  
      # Data directory path
      $dir    = "$DATA_DIR_NEST_AF";
      $dir    = &replaceTokens( $dir, $fileType );
      &checkDir( $dir );

      if ( $TEMP_DIR_NEST_AF eq $DATA_DIR_NEST_AF ) {

	# We don't have to move files
	print "No move necessary, nested AF data is in proper location\n";

      } else {

	# Move command (list the directory first to force an automount)
	$cmd    = "ls $dir > /dev/null; mv -f $mask $dir";
    
	# Move the files
	print "$cmd\n";
	$result = qx( $cmd );
    }
    }

    #-------------------------------
    # 0.25x0.3125 Nested Asia grid 
    #-------------------------------
    if ( $DO_NEST_AS =~ "T" ) {

      # Temporary file mask
      $mask   = "$TEMP_DIR_NEST_AS$DATA_FILE_NEST_AS";
      $mask   = &replaceTokens( $mask, $fileType );
  
      # Data directory path
      $dir    = "$DATA_DIR_NEST_AS";
      $dir    = &replaceTokens( $dir, $fileType );
      &checkDir( $dir );

      if ( $TEMP_DIR_NEST_AS eq $DATA_DIR_NEST_AS ) {

	# We don't have to move files
	print "No move necessary, nested AS data is in proper location\n";

      } else {

	# Move command (list the directory first to force an automount)
	$cmd    = "ls $dir > /dev/null; mv -f $mask $dir";
    
	# Move the files
	print "$cmd\n";
	$result = qx( $cmd );
    }
    }

    #-------------------------------
    # 0.25x0.3125 Nested Europe grid
    #-------------------------------
    if ( $DO_NEST_EU =~ "T" ) {

      # Temporary file mask
      $mask   = "$TEMP_DIR_NEST_EU$DATA_FILE_NEST_EU";
      $mask   = &replaceTokens( $mask, $fileType );
  
      # Data directory path
      $dir    = "$DATA_DIR_NEST_EU";
      $dir    = &replaceTokens( $dir, $fileType );
      &checkDir( $dir );

      if ( $TEMP_DIR_NEST_AS eq $DATA_DIR_NEST_AS ) {

	# We don't have to move files
	print "No move necessary, nested EU data is in proper location\n";

      } else {

        # Move command (list the directory first to force an automount)
        $cmd    = "ls $dir > /dev/null; mv -f $mask $dir";
    
        # Move the files
        print "$cmd\n";
        $result = qx( $cmd );
    }	
    }	

    #-------------------------------
    # 0.25x0.3125 Middle East grid 
    #-------------------------------
    if ( $DO_NEST_ME =~ "T" ) {

      # Temporary file mask
      $mask   = "$TEMP_DIR_NEST_ME$DATA_FILE_NEST_ME";
      $mask   = &replaceTokens( $mask, $fileType );
  
      # Data directory path
      $dir    = "$DATA_DIR_NEST_ME";
      $dir    = &replaceTokens( $dir, $fileType );
      &checkDir( $dir );

      if ( $TEMP_DIR_NEST_ME eq $DATA_DIR_NEST_ME ) {

	# We don't have to move files
	print "No move necessary, nested ME data is in proper location\n";

      } else {

	# Move command (list the directory first to force an automount)
	$cmd    = "ls $dir > /dev/null; mv -f $mask $dir";
    
	# Move the files
	print "$cmd\n";
	$result = qx( $cmd );
    }
    }

    #-------------------------------
    # 0.25x0.3125 Nested N. America grid
    #-------------------------------
    if ( $DO_NEST_NA =~ "T" ) {

      # Temporary file mask
      $mask   = "$TEMP_DIR_NEST_NA$DATA_FILE_NEST_NA";
      $mask   = &replaceTokens( $mask, $fileType );
  
      # Data directory path
      $dir    = "$DATA_DIR_NEST_NA";
      $dir    = &replaceTokens( $dir, $fileType );
      &checkDir( $dir );

      if ( $TEMP_DIR_NEST_NA eq $DATA_DIR_NEST_NA ) {

	# We don't have to move files
	print "No move necessary, nested NA data is in proper location\n";

      } else {

        # Move command (list the directory first to force an automount)
        $cmd    = "ls $dir > /dev/null; mv -f $mask $dir";
    
        # Move the files
        print "$cmd\n";
        $result = qx( $cmd );
    }				
    }				

    #-------------------------------
    # 0.25x0.3125 Nested Oceania grid 
    #-------------------------------
    if ( $DO_NEST_OC =~ "T" ) {

      # Temporary file mask
      $mask   = "$TEMP_DIR_NEST_OC$DATA_FILE_NEST_OC";
      $mask   = &replaceTokens( $mask, $fileType );
  
      # Data directory path
      $dir    = "$DATA_DIR_NEST_OC";
      $dir    = &replaceTokens( $dir, $fileType );
      &checkDir( $dir );

      if ( $TEMP_DIR_NEST_OC eq $DATA_DIR_NEST_OC ) {

	# We don't have to move files
	print "No move necessary, nested OC data is in proper location\n";

      } else {

	# Move command (list the directory first to force an automount)
	$cmd    = "ls $dir > /dev/null; mv -f $mask $dir";
    
	# Move the files
	print "$cmd\n";
	$result = qx( $cmd );
    }
    }

    #-------------------------------
    # 0.25x0.3125 Nested Russia grid 
    #-------------------------------
    if ( $DO_NEST_RU =~ "T" ) {

      # Temporary file mask
      $mask   = "$TEMP_DIR_NEST_RU$DATA_FILE_NEST_RU";
      $mask   = &replaceTokens( $mask, $fileType );
  
      # Data directory path
      $dir    = "$DATA_DIR_NEST_RU";
      $dir    = &replaceTokens( $dir, $fileType );
      &checkDir( $dir );

      if ( $TEMP_DIR_NEST_RU eq $DATA_DIR_NEST_RU ) {

	# We don't have to move files
	print "No move necessary, nested RU data is in proper location\n";

      } else {

	# Move command (list the directory first to force an automount)
	$cmd    = "ls $dir > /dev/null; mv -f $mask $dir";
    
	# Move the files
	print "$cmd\n";
	$result = qx( $cmd );
    }
    }

    #-------------------------------
    # 0.25x0.3125 Nested S. America grid 
    #-------------------------------
    if ( $DO_NEST_SA =~ "T" ) {

      # Temporary file mask
      $mask   = "$TEMP_DIR_NEST_SA$DATA_FILE_NEST_SA";
      $mask   = &replaceTokens( $mask, $fileType );
  
      # Data directory path
      $dir    = "$DATA_DIR_NEST_SA";
      $dir    = &replaceTokens( $dir, $fileType );
      &checkDir( $dir );

      if ( $TEMP_DIR_NEST_SA eq $DATA_DIR_NEST_SA ) {

	# We don't have to move files
	print "No move necessary, nested SA data is in proper location\n";

      } else {

	# Move command (list the directory first to force an automount)
	$cmd    = "ls $dir > /dev/null; mv -f $mask $dir";
    
	# Move the files
	print "$cmd\n";
	$result = qx( $cmd );
    }
    }

    #-------------------------------
    # 0.5x0.625 Nested Asia grid 
    #-------------------------------
    if ( $DO_NEST_AS_05 =~ "T" ) {

      # Temporary file mask
      $mask   = "$TEMP_DIR_NEST_AS_05$DATA_FILE_NEST_AS_05";
      $mask   = &replaceTokens( $mask, $fileType );
  
      # Data directory path
      $dir    = "$DATA_DIR_NEST_AS_05";
      $dir    = &replaceTokens( $dir, $fileType );
      &checkDir( $dir );

      if ( $TEMP_DIR_NEST_AS_05 eq $DATA_DIR_NEST_AS_05 ) {

	# We don't have to move files
	print "No move necessary, nested AS data is in proper location\n";

      } else {

	# Move command (list the directory first to force an automount)
	$cmd    = "ls $dir > /dev/null; mv -f $mask $dir";
    
	# Move the files
	print "$cmd\n";
	$result = qx( $cmd );
    }
    }

    #-------------------------------
    # 0.5x0.625 Nested Europe grid
    #-------------------------------
    if ( $DO_NEST_EU_05 =~ "T" ) {

      # Temporary file mask
      $mask   = "$TEMP_DIR_NEST_EU_05$DATA_FILE_NEST_EU_05";
      $mask   = &replaceTokens( $mask, $fileType );
  
      # Data directory path
      $dir    = "$DATA_DIR_NEST_EU_05";
      $dir    = &replaceTokens( $dir, $fileType );
      &checkDir( $dir );

      if ( $TEMP_DIR_NEST_EU_05 eq $DATA_DIR_NEST_EU_05 ) {

	# We don't have to move files
	print "No move necessary, nested EU data is in proper location\n";

      } else {

	# Move command (list the directory first to force an automount)
	$cmd    = "ls $dir > /dev/null; mv -f $mask $dir";
    
	# Move the files
	print "$cmd\n";
	$result = qx( $cmd );
    }
    }	

    #-------------------------------
    # 0.5x0.625 Nested N. America grid
    #-------------------------------
    if ( $DO_NEST_NA_05 =~ "T" ) {

      # Temporary file mask
      $mask   = "$TEMP_DIR_NEST_NA_05$DATA_FILE_NEST_NA_05";
      $mask   = &replaceTokens( $mask, $fileType );
  
      # Data directory path
      $dir    = "$DATA_DIR_NEST_NA_05";
      $dir    = &replaceTokens( $dir, $fileType );
      &checkDir( $dir );

      if ( $TEMP_DIR_NEST_NA_05 eq $DATA_DIR_NEST_NA_05 ) {

	# We don't have to move files
	print "No move necessary, nested NA data is in proper location\n";

      } else {

	# Move command (list the directory first to force an automount)
	$cmd    = "ls $dir > /dev/null; mv -f $mask $dir";
    
	# Move the files
	print "$cmd\n";
	$result = qx( $cmd );
    }
    }				

    #-------------------------------
    # 0.25x0.3125 global grid
    #-------------------------------
    if ( $DO_025x03125 =~ "T" ) {

      # File path to temporary directory
      $mask   = "$TEMP_DIR_025x03125$DATA_FILE_025x03125";
      $mask   = &replaceTokens( $mask, $fileType );
    
      # File path to data directory
      $dir    = "$DATA_DIR_025x03125";
      $dir    = &replaceTokens( $dir, $fileType );
      &checkDir( $dir );    

      if ( $TEMP_DIR_025x03125 eq $DATA_DIR_025x03125 ) {

	# We don't have to move files
	print "No move necessary, 025x03125 data is in proper location\n";

      } else {

	# Move command (list the directory first to force an automount)
	$cmd    = "ls $dir > /dev/null; mv -f $mask $dir";
    
	# Move the files
	print "$cmd\n";
	$result = qx( $cmd );
    }
    }    

    #-------------------------------
    # 0.5x0.625 global grid
    #-------------------------------
    if ( $DO_05x0625 =~ "T" ) {

      # File path to temporary directory
      $mask   = "$TEMP_DIR_05x0625$DATA_FILE_05x0625";
      $mask   = &replaceTokens( $mask, $fileType );
    
      # File path to data directory
      $dir    = "$DATA_DIR_05x0625";
      $dir    = &replaceTokens( $dir, $fileType );
      &checkDir( $dir );    

      if ( $TEMP_DIR_05x0625 eq $DATA_DIR_05x0625 ) {

	# We don't have to move files
	print "No move necessary, 05x0625 data is in proper location\n";

      } else {

	# Move command (list the directory first to force an automount)
	$cmd    = "ls $dir > /dev/null; mv -f $mask $dir";
    
	# Move the files
	print "$cmd\n";
	$result = qx( $cmd );
    }
    }    

    #-------------------------------
    # 2 x 2.5 global grid
    #-------------------------------
    if ( $DO_2x25 =~ "T" ) {

      # File path to temporary directory
      $mask   = "$TEMP_DIR_2x25$DATA_FILE_2x25";
      $mask   = &replaceTokens( $mask, $fileType );
    
      # File path to data directory
      $dir    = "$DATA_DIR_2x25";
      $dir    = &replaceTokens( $dir, $fileType );
      &checkDir( $dir );    

      if ( $TEMP_DIR_2x25 eq $DATA_DIR_2x25 ) {

	# We don't have to move files
	print "No move necessary, 2x25 data is in proper location\n";

      } else {

	# Move command (list the directory first to force an automount)
	$cmd    = "ls $dir > /dev/null; mv -f $mask $dir";
    
	# Move the files
	print "$cmd\n";
	$result = qx( $cmd );
    }
    }    

    #-------------------------------
    # 4 x 5 global grid
    #-------------------------------
    if ( $DO_4x5 =~ "T" ) {

      # File path to temporary directory
      $mask   = "$TEMP_DIR_4x5$DATA_FILE_4x5";
      $mask   = &replaceTokens( $mask, $fileType );
    
      # File path to data directory
      $dir    = "$DATA_DIR_4x5";
      $dir    = &replaceTokens( $dir, $fileType );
      &checkDir( $dir );    

      if ( $TEMP_DIR_4x5 eq $DATA_DIR_4x5 ) {

	# We don't have to move files
	print "No move necessary, 4x5 data is in proper location\n";

      } else {

	# Move command (list the directory first to force an automount)
	$cmd    = "ls $dir > /dev/null; mv -f $mask $dir";
    
	# Move the files
	print "$cmd\n";
	$result = qx( $cmd );
    }
    }
  }
  
  # Return normally
  return( 0 );
}
#EOC
#------------------------------------------------------------------------------
#          Harvard University Atmospheric Chemistry Modeling Group            !
#------------------------------------------------------------------------------
#BOP
#
# !IROUTINE: main
#
# !DESCRIPTION: Routine main is the driver routine for the moveGeosFp script.
#\\
#\\
# !INTERFACE:
#
sub main() {
#
# !CALLING SEQUENCE:
#  &main();
#
# !REVISION HISTORY:
#  23 Jan 2012 - R. Yantosca - Initial version
#EOP
#------------------------------------------------------------------------------

  # Error check arguments
  if ( scalar( @ARGV ) == 0 ) { 
    print "Usage: moveGeosFp YYYYMMDD FILETYPE\n"; 
    exit(1);
  }

  # Get default values
  &getDefaults( "doGeosFp.input", $ARGV[0] );

  # Get data & temporary directories
  &getDirectories( $DEFAULTS_FOR_EXE );

  # Get system variables
  &getSysVars();

  # Run jobs
  &moveFiles( @ARGV );

  # Return normally
  return(0);
}
#EOC

#------------------------------------------------------------------------------

# Start main program
main();

# Exit normally
exit(0);
